-- 1. **Rank the customers based on the total amount they've spent on rentals.**
SELECT customer_id, SUM(amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(amount) DESC) AS spending_rank
FROM payment
GROUP BY customer_id
ORDER BY total_spent DESC;

-- 2. **Calculate the cumulative revenue generated by each film over time.**
SELECT f.film_id, r.rental_date,
       SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY r.rental_date) AS cumulative_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
ORDER BY f.film_id, r.rental_date;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
SELECT f.film_id, AVG(f.rental_duration) AS avg_rental_duration
FROM film f where f.length=(select max(length) from film f2 where f2.length=f.length)
GROUP BY f.film_id;

-- 4. **Identify the top 3 films in each category based on their rental counts.**
SELECT c.name, f.title, COUNT(r.rental_id) AS rental_count
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
LEFT JOIN inventory i ON f.film_id = i.film_id
LEFT JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.name, f.title
ORDER BY c.name, rental_count DESC
LIMIT 3;

-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.**
SELECT r.customer_id, COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS rental_count_difference
FROM rental r
GROUP BY r.customer_id;

-- 6. **Find the monthly revenue trend for the entire rental store over time.**
SELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month, SUM(p.amount) AS monthly_revenue
FROM payment p
GROUP BY month
ORDER BY month;

-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
SELECT customer_id, total_spent
FROM (
    SELECT
        c.customer_id,
        SUM(p.amount) AS total_spent,
        NTILE(5) OVER (ORDER BY SUM(p.amount) DESC) AS percentile_group
    FROM payment p
    JOIN rental r ON p.rental_id = r.rental_id
    JOIN customer c ON r.customer_id = c.customer_id
    GROUP BY c.customer_id
) AS customer_percentiles
WHERE percentile_group = 1;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
with rental_category as (SELECT c.name as category,count(r.rental_id) as rental_counts ,ROW_NUMBER() over (order by count(r.rental_id)) As ranking
 From film f INNER JOIN film_category fc ON f.film_id = fc.film_id INNER JOIN category c ON fc.category_id = c.category_id INNER JOIN inventory i ON fc.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY  category)
SELECT  category , rental_counts ,sum(rental_counts) over (order by ranking) As running_totals
FROM rental_category ORDER by rental_counts;

-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**
with rc as (SELECT c.name AS category,f.title AS film,COUNT(r.rental_id) AS rental_count FROM category c
JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id LEFT JOIN inventory i ON f.film_id = i.film_id
LEFT JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY c.name, f.title)
select rc.film from rc where rc.rental_count<(select avg(rental_count) from rc r where rc.category=r.category) order by rc.film;

-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
SELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month, SUM(p.amount) AS monthly_revenue
FROM payment p
GROUP BY month
ORDER BY monthly_revenue DESC
LIMIT 5;